'''

 V-Ray/Blender 2.5

 http://vray.cgdo.ru

 Author: Andrey M. Izrantsev (aka bdancer)
 E-Mail: izrantsev@gmail.com

 This plugin is protected by the GNU General Public License v.2

 This program is free software: you can redioutibute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is dioutibuted in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 All Rights Reserved. V-Ray(R) is a registered trademark of Chaos Group

'''


''' Python modules '''
import os

''' Blender modules '''
import bpy
from bpy.props import *

''' vb modules '''
from vb25.utils import *


class VRayObject(bpy.types.IDPropertyGroup):
    pass

bpy.types.Object.vray= PointerProperty(
	name= "V-Ray Object Settings",
	type=  VRayObject,
	description= "V-Ray object settings."
)


'''
  MtlWrapper
'''
class MtlWrapper(bpy.types.IDPropertyGroup):
    pass

VRayObject.MtlWrapper= PointerProperty(
	name= "MtlWrapper",
	type=  MtlWrapper,
	description= "V-Ray MtlWrapper settings"
)

MtlWrapper.use= BoolProperty(
	name= "Use object wrapper options",
	description= "Use object wrapper options.",
	default= False
)

MtlWrapper.generate_gi= FloatProperty(
	name= "Generate GI",
	description= "Controls the GI generated by the material.",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 1
)

MtlWrapper.receive_gi= FloatProperty(
	name= "Receive GI",
	description= "Controls the GI received by the material.",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 1
)

MtlWrapper.generate_caustics= FloatProperty(
	name= "Generate caustics",
	description= "Controls the caustics generated by the material.",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 1
)

MtlWrapper.receive_caustics= FloatProperty(
	name= "Receive caustics",
	description= "Controls the caustics received by the material.",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 1
)

MtlWrapper.alpha_contribution= FloatProperty(
	name= "Alpha contribution",
	description= "The contribution of the resulting color to the alpha channel.",
	min= -1.0,
	max= 1.0,
	soft_min= -1.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.matte_surface= BoolProperty(
	name= "Matte surface",
	description= "Makes the material appear as a matte material, which shows the background, instead of the base material, when viewed directly.",
	default= False
)

MtlWrapper.shadows= BoolProperty(
	name= "Shadows",
	description= "Turn this on to make shadow visible on the matter surface.",
	default= False
)

MtlWrapper.affect_alpha= BoolProperty(
	name= "Affect alpha",
	description= "Turn this on to make shadows affect the alpha contribution of the matte surface.",
	default= False
)

MtlWrapper.shadow_tint_color= FloatVectorProperty(
	name= "Shadow tint color",
	description= 'Tint for the shadows on the matte surface.',
	subtype= 'COLOR',
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	default= (0.0,0.0,0.0)
)

MtlWrapper.shadow_brightness= FloatProperty(
	name= "Shadow brightness",
	description= "An optional brightness parameter for the shadows on the matte surface.A value of 0.0 will make the shadows completely invisible, while a value of 1.0 will show the full shadows.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.reflection_amount= FloatProperty(
	name= "Reflection amount",
	description= "Shows the reflections of the base material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.refraction_amount= FloatProperty(
	name= "Refraction amount",
	description= "Shows the refractions of the base material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.gi_amount= FloatProperty(
	name= "GI amount",
	description= "Determines the amount of gi shadows.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.no_gi_on_other_mattes= BoolProperty(
	name= "No GI on other mattes",
	description= "This will cause the material to appear as a matte object in reflections, refractions, GI etc for other matte objects.",
	default= True
)

MtlWrapper.matte_for_secondary_rays= BoolProperty(
	name= "Matte for secondary rays",
	description= "Turn this on to make the material act as matte for all secondary rays (reflections, refractions, etc)",
	default= False
)

MtlWrapper.gi_surface_id= IntProperty(
	name= "GI surface ID",
	description= "If two objects have different GI surface ids, the light cache samples of the two objects will not be blended",
	min= 0,
	max= 10,
	default= 0
)

MtlWrapper.gi_quality_multiplier= FloatProperty(
	name= "GI quality multiplier",
	description= "A multiplier for GI quality",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

MtlWrapper.reflection_filter_tex= FloatVectorProperty(
	name= "Reflection filter",
	description= 'Reflection filter.',
	subtype= 'COLOR',
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	default= (1.0,1.0,1.0)
)

MtlWrapper.trace_depth= IntProperty(
	name= "Trace depth",
	description= "The maximum reflection depth (-1 is controlled by the global options)",
	min= -1,
	max= 1000,
	default= -1
)


'''
  MtlOverride
'''
class MtlOverride(bpy.types.IDPropertyGroup):
    pass

VRayObject.MtlOverride= PointerProperty(
	name= "MtlOverride",
	type=  MtlOverride,
	description= "V-Ray MtlOverride settings"
)

MtlOverride.use= BoolProperty(
	name= "Use override material",
	description= "Use override material.",
	default= False
)

MtlOverride.gi_mtl= StringProperty(
	name= "GI material",
	description= "The gi material.",
	default= ""
)

MtlOverride.reflect_mtl= StringProperty(
	name= "Reflection material",
	description= "The reflection material.",
	default= ""
)

MtlOverride.refract_mtl= StringProperty(
	name= "Refraction material",
	description= "The refraction material.",
	default= ""
)

MtlOverride.shadow_mtl= StringProperty(
	name= "Shadow material",
	description= "The shadow material.",
	default= ""
)

MtlOverride.environment_override= StringProperty(
	name= "Environment override",
	description= "Environment override texture.",
	default= ""
)

MtlOverride.environment_priority= IntProperty(
	name= "Environment priority",
	description= "Environment override priority (used when several materials override it along a ray path)",
	min= 0,
	max= 100,
	default= 0
)


'''
  MtlRenderStats
'''
class MtlRenderStats(bpy.types.IDPropertyGroup):
    pass

VRayObject.MtlRenderStats= PointerProperty(
	name= "MtlRenderStats",
	type=  MtlRenderStats,
	description= "V-Ray MtlRenderStats settings"
)

MtlRenderStats.use= BoolProperty(
	name= "Use object render options",
	description= "Use object render options.",
	default= False
)

MtlRenderStats.camera_visibility= BoolProperty(
	name= "Camera visibility",
	description= "TODO.",
	default= True
)

MtlRenderStats.reflections_visibility= BoolProperty(
	name= "Reflections visibility",
	description= "TODO.",
	default= True
)

MtlRenderStats.refractions_visibility= BoolProperty(
	name= "Refractions visibility",
	description= "TODO.",
	default= True
)

MtlRenderStats.gi_visibility= BoolProperty(
	name= "GI visibility",
	description= "TODO.",
	default= True
)

MtlRenderStats.shadows_visibility= BoolProperty(
	name= "Shadows visibility",
	description= "TODO.",
	default= True
)

MtlRenderStats.visibility= BoolProperty(
	name= "Overall visibility",
	description= "TODO.",
	default= True
)


class GeomDisplacedMesh(bpy.types.IDPropertyGroup):
	pass

VRayObject.GeomDisplacedMesh= PointerProperty(
	name= "GeomDisplacedMesh",
	type=  GeomDisplacedMesh,
	description= "GeomDisplacedMesh texture slot settings."
)

GeomDisplacedMesh.use= BoolProperty(
	name= "Override displacement settings",
	description= "Override material displacement settings.",
	default= False
)

GeomDisplacedMesh.type= EnumProperty(
	name= "Type",
	description= "Displacement type.",
	items= (
		('2D',  "2D",     "2D displacement."),
		('NOR', "Normal", "Normal displacement."),
		('3D',  "Vector", "Vector displacement.")
	),
	default= 'NOR'
)

GeomDisplacedMesh.displacement_amount= FloatProperty(
	name= "Amount",
	description= "Displacement amount.",
	min= -100.0,
	max= 100.0,
	soft_min= -0.1,
	soft_max= 0.1,
	precision= 5,
	default= 0.02
)

GeomDisplacedMesh.displacement_shift= FloatProperty(
	name="Shift",
	description="",
	min=-100.0,
	max=100.0,
	soft_min=-1.0,
	soft_max=1.0,
	precision=4,
	default=0.0
)

GeomDisplacedMesh.water_level= FloatProperty(
	name="Water level",
	description="",
	min=-100.0, max=100.0, soft_min=-1.0, soft_max=1.0,
	default=0.0
)

GeomDisplacedMesh.use_globals= BoolProperty(
	name= "Use globals",
	description= "If true, the global displacement quality settings will be used.",
	default= True
)

GeomDisplacedMesh.view_dep= BoolProperty(
	name= "View dependent",
	description= "Determines if view-dependent tesselation is used",
	default= True
)

GeomDisplacedMesh.edge_length= FloatProperty(
	name= "Edge length",
	description= "Determines the approximate edge length for the sub-triangles",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 4
)

GeomDisplacedMesh.max_subdivs= IntProperty(
	name= "Max subdivs",
	description= "Determines the maximum subdivisions for a triangle of the original mesh",
	min= 0,
	max= 2048,
	soft_min= 0,
	soft_max= 1024,
	default= 256
)

GeomDisplacedMesh.keep_continuity= BoolProperty(
	name= "Keep continuity",
	description= "If true, the plugin will attempt to keep the continuity of the displaced surface",
	default= False
)

GeomDisplacedMesh.map_channel= IntProperty(
	name= "Map channel",
	description= "The mapping channel to use for vector and 2d displacement.",
	min= 0,
	max= 100,
	soft_min= 0,
	soft_max= 10,
	default= 1
)

GeomDisplacedMesh.use_bounds= BoolProperty(
	name= "Use bounds",
	description= "If true, the min/max values for the displacement texture are specified by the min_bound and max_bound parameters; if false, these are calculated automatically.",
	default= False
)

GeomDisplacedMesh.min_bound= FloatVectorProperty(
	name= "Min bound",
	description= "The lowest value for the displacement texture",
	subtype= 'COLOR',
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	default= (0,0,0)
)

GeomDisplacedMesh.max_bound= FloatVectorProperty(
	name= "Max bound",
	description= "The biggest value for the displacement texture",
	subtype= 'COLOR',
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	default= (1,1,1)
)

GeomDisplacedMesh.resolution= IntProperty(
	name= "Resolution",
	description= "Resolution at which to sample the displacement map for 2d displacement.",
	min= 0,
	max= 2048,
	soft_min= 0,
	soft_max= 512,
	default= 256
)

GeomDisplacedMesh.precision= IntProperty(
	name= "Precision",
	description= "Increase for curved surfaces to avoid artifacts.",
	min= 0,
	max= 100,
	soft_min= 0,
	soft_max= 10,
	default= 8
)

GeomDisplacedMesh.tight_bounds= BoolProperty(
	name= "Tight bounds",
	description= "When this is on, initialization will be slower, but tighter bounds will be computed for the displaced triangles making rendering faster.",
	default= False
)

GeomDisplacedMesh.filter_texture= BoolProperty(
	name= "Filter texture",
	description= "Filter the texture for 2d displacement.",
	default= False
)

GeomDisplacedMesh.filter_blur= FloatProperty(
	name= "Blur",
	description= "The amount of UV space to average for filtering purposes. A value of 1.0 will average the whole texture.",
	min= 0.0,
	max= 100.0,
	soft_min= 0.0,
	soft_max= 10.0,
	precision= 3,
	default= 0.001
)



'''
  GUI
'''
narrowui= 200

def base_poll(cls, context):
	rd= context.scene.render
	return (context.object and (context.object.type not in ('LAMP','CAMERA','ARMATURE'))) and (rd.engine in cls.COMPAT_ENGINES)


class ObjectButtonsPanel():
	bl_space_type  = 'PROPERTIES'
	bl_region_type = 'WINDOW'
	bl_context     = 'object'


class OBJECT_PT_VRAY_override(ObjectButtonsPanel, bpy.types.Panel):
	bl_label   = "Override"
	bl_options = {'DEFAULT_CLOSED'}
	
	COMPAT_ENGINES = {'VRAY_RENDER','VRAY_RENDER_PREVIEW'}

	@classmethod
	def poll(cls, context):
		return base_poll(__class__, context)

	def draw_header(self, context):
		ob= context.object
		plugin= ob.vray.MtlOverride
		self.layout.prop(plugin, 'use', text="")

	def draw(self, context):
		wide_ui= context.region.width > 200

		ob= context.object

		MtlOverride= ob.vray.MtlOverride
		
		layout= self.layout
		layout.active= MtlOverride.use

		split= layout.split()
		col= split.column()
		col.prop_search(MtlOverride, 'gi_mtl',      bpy.data, 'materials', text= "GI")
		col.prop_search(MtlOverride, 'reflect_mtl', bpy.data, 'materials', text= "Reflection")
		col.prop_search(MtlOverride, 'refract_mtl', bpy.data, 'materials', text= "Refraction")
		col.prop_search(MtlOverride, 'shadow_mtl',  bpy.data, 'materials', text= "Shadow")

		layout.separator()
		split= layout.split()
		col= split.column()
		col.prop_search(MtlOverride, 'environment_override',  bpy.data, 'textures', text= "Environment")

		layout.separator()

		split= layout.split()
		col= split.column()
		col.prop(MtlOverride, 'environment_priority')


class OBJECT_PT_VRAY_wrapper(ObjectButtonsPanel, bpy.types.Panel):
	bl_label = "Wrapper"
	bl_options = {'DEFAULT_CLOSED'}
	
	COMPAT_ENGINES = {'VRAY_RENDER','VRAY_RENDER_PREVIEW'}

	@classmethod
	def poll(cls, context):
		return base_poll(__class__, context)

	def draw_header(self, context):
		ob= context.object
		plugin= ob.vray.MtlWrapper
		self.layout.prop(plugin, 'use', text="")

	def draw(self, context):
		wide_ui= context.region.width > 200

		ob= context.object
		plugin= ob.vray.MtlWrapper
		
		layout= self.layout
		layout.active= plugin.use

		split= layout.split()
		col= split.column()
		col.prop(plugin, 'generate_gi')
		col.prop(plugin, 'receive_gi')
		if wide_ui:
			col= split.column()
		col.prop(plugin, 'generate_caustics')
		col.prop(plugin, 'receive_caustics')

		split= layout.split()
		col= split.column()
		col.prop(plugin, 'gi_quality_multiplier')

		split= layout.split()
		col= split.column()
		col.label(text="Matte properties")

		split= layout.split()
		colL= split.column()
		colL.prop(plugin, 'matte_surface')
		if wide_ui:
			colR= split.column()
		else:
			colR= colL
		colR.prop(plugin, 'alpha_contribution')
		if plugin.matte_surface:
			colR.prop(plugin, 'reflection_amount')
			colR.prop(plugin, 'refraction_amount')
			colR.prop(plugin, 'gi_amount')
			colR.prop(plugin, 'no_gi_on_other_mattes')

			colL.prop(plugin, 'affect_alpha')
			colL.prop(plugin, 'shadows')
			if plugin.shadows:
				colL.prop(plugin, 'shadow_tint_color')
				colL.prop(plugin, 'shadow_brightness')
			
		split= layout.split()
		col= split.column()
		col.label(text="Miscellaneous")

		split= layout.split()
		col= split.column()
		col.prop(plugin, 'gi_surface_id')
		col.prop(plugin, 'trace_depth')
		if wide_ui:
			col= split.column()
		col.prop(plugin, 'matte_for_secondary_rays')


class OBJECT_PT_VRAY_render(ObjectButtonsPanel, bpy.types.Panel):
	bl_label = "Render"
	bl_options = {'DEFAULT_CLOSED'}
	
	COMPAT_ENGINES = {'VRAY_RENDER','VRAY_RENDER_PREVIEW'}

	@classmethod
	def poll(cls, context):
		return base_poll(__class__, context)

	def draw_header(self, context):
		ob= context.object
		plugin= ob.vray.MtlRenderStats
		self.layout.prop(plugin, 'use', text="")

	def draw(self, context):
		wide_ui= context.region.width > 200

		ob= context.object
		plugin= ob.vray.MtlRenderStats

		layout= self.layout
		layout.active= plugin.use

		split= layout.split()
		col= split.column()
		col.prop(plugin, 'visibility', text="Visible")

		split= layout.split()
		col= split.column()
		col.label(text="Visible to:")

		split= layout.split()
		sub= split.column()
		sub.active= plugin.visibility
		sub.prop(plugin, 'camera_visibility', text="Camera")
		sub.prop(plugin, 'gi_visibility', text="GI")
		sub.prop(plugin, 'shadows_visibility', text="Shadows")
		if wide_ui:
			sub= split.column()
			sub.active= plugin.visibility
		sub.prop(plugin, 'reflections_visibility', text="Reflections")
		sub.prop(plugin, 'refractions_visibility', text="Refractions")


class VRAY_OB_displacement(ObjectButtonsPanel, bpy.types.Panel):
	bl_label = "Displacement"
	bl_options = {'DEFAULT_CLOSED'}

	COMPAT_ENGINES = {'VRAY_RENDER','VRAY_RENDER_PREVIEW'}

	@classmethod
	def poll(cls, context):
		return base_poll(__class__, context)

	def draw_header(self, context):
		ob= context.object
		VRayObject= ob.vray
		GeomDisplacedMesh= VRayObject.GeomDisplacedMesh
		self.layout.prop(GeomDisplacedMesh, 'use', text="")

	def draw(self, context):
		wide_ui= context.region.width > narrowui

		ob= context.object
		VRayObject= ob.vray
		GeomDisplacedMesh= VRayObject.GeomDisplacedMesh

		layout= self.layout
		layout.active= GeomDisplacedMesh.use

		split= layout.split()
		col= split.column()
		col.prop(GeomDisplacedMesh, 'displacement_shift', slider=True)
		col.prop(GeomDisplacedMesh, 'water_level', slider=True)
		col.prop(GeomDisplacedMesh, 'resolution')
		col.prop(GeomDisplacedMesh, 'precision')
		if wide_ui:
			col= split.column()
		col.prop(GeomDisplacedMesh, 'keep_continuity')
		col.prop(GeomDisplacedMesh, 'use_bounds')
		if GeomDisplacedMesh.use_bounds:
			sub= col.row()
			sub.prop(GeomDisplacedMesh, 'min_bound', text="Min")
			sub.prop(GeomDisplacedMesh, 'max_bound', text="Max")
		col.prop(GeomDisplacedMesh, 'filter_texture')
		if GeomDisplacedMesh.filter_texture:
			col.prop(GeomDisplacedMesh, 'filter_blur')

		split= layout.split()
		col= split.column()
		col.prop(GeomDisplacedMesh, 'use_globals')
		if not GeomDisplacedMesh.use_globals:
			split= layout.split()
			col= split.column()
			col.prop(GeomDisplacedMesh, 'edge_length')
			col.prop(GeomDisplacedMesh, 'max_subdivs')
			if wide_ui:
				col= split.column()
			col.prop(GeomDisplacedMesh, 'view_dep')
			col.prop(GeomDisplacedMesh, 'tight_bounds')
