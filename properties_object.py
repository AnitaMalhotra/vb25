'''

 V-Ray/Blender 2.5

 http://vray.cgdo.ru

 Author: Andrey M. Izrantsev (aka bdancer)
 E-Mail: izrantsev@gmail.com

 This plugin is protected by the GNU General Public License v.2

 This program is free software: you can redioutibute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is dioutibuted in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 All Rights Reserved. V-Ray(R) is a registered trademark of Chaos Group

'''


import bpy


FloatProperty= bpy.types.Object.FloatProperty
IntProperty= bpy.types.Object.IntProperty
BoolProperty= bpy.types.Object.BoolProperty
EnumProperty= bpy.types.Object.EnumProperty
VectorProperty= bpy.types.Object.FloatVectorProperty
StringProperty= bpy.types.Object.StringProperty



'''
  Plugin: MtlRenderStats
'''
# base_mtl: plugin (Base material)

# camera_visibility: bool
BoolProperty(
	attr= 'vb_mrs_camera_visibility',
	name= 'Camera visibility',
	description= "TODO.",
	default= True
)

# reflections_visibility: bool
BoolProperty(
	attr= 'vb_mrs_reflections_visibility',
	name= 'Reflections visibility',
	description= "TODO.",
	default= True
)

# refractions_visibility: bool
BoolProperty(
	attr= 'vb_mrs_refractions_visibility',
	name= 'Refractions visibility',
	description= "TODO.",
	default= True
)

# gi_visibility: bool
BoolProperty(
	attr= 'vb_mrs_gi_visibility',
	name= 'GI visibility',
	description= "TODO.",
	default= True
)

# shadows_visibility: bool
BoolProperty(
	attr= 'vb_mrs_shadows_visibility',
	name= 'Shadows visibility',
	description= "TODO.",
	default= True
)

# visibility: float (Overall visibility)
BoolProperty(
	attr= 'vb_mrs_visibility',
	name= 'Overall visibility',
	description= "TODO.",
	default= True
)



'''
  Plugin: MtlWrapper
'''
BoolProperty(
	attr='vray_node_use_wrapper',
	name='Use wrapper',
	description='Use wrapper options.',
	default= False
)

# base_material: plugin (The base material)
# generate_gi: float (Controls the GI generated by the material.)
FloatProperty(
	attr= 'vb_mwrap_generate_gi',
	name= 'Generate GI',
	description= "Controls the GI generated by the material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# receive_gi: float (Controls the GI received by the material.)
FloatProperty(
	attr= 'vb_mwrap_receive_gi',
	name= 'Receive GI',
	description= "Controls the GI received by the material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# generate_caustics: float (Controls the caustics generated by the material.)
FloatProperty(
	attr= 'vb_mwrap_generate_caustics',
	name= 'Generate caustics',
	description= "Controls the caustics generated by the material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# receive_caustics: float (Controls the caustics received by the material.)
FloatProperty(
	attr= 'vb_mwrap_receive_caustics',
	name= 'Receive caustics',
	description= "Controls the caustics received by the material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# alpha_contribution: float (The contribution of the resulting color to the alpha channel.)
FloatProperty(
	attr= 'vb_mwrap_alpha_contribution',
	name= 'Alpha contribution',
	description= "The contribution of the resulting color to the alpha channel.",
	min= -1.0,
	max= 1.0,
	soft_min= -1.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# matte_surface: bool (Makes the material appear as a matte material, which shows the background, instead of the base material, when viewed directly.)
BoolProperty(
	attr= 'vb_mwrap_matte_surface',
	name= 'Matte surface',
	description= "Makes the material appear as a matte material, which shows the background, instead of the base material, when viewed directly.",
	default= False
)

# shadows: bool (Turn this on to make shadow visible on the matter surface.)
BoolProperty(
	attr= 'vb_mwrap_shadows',
	name= 'Shadows',
	description= "Turn this on to make shadow visible on the matter surface.",
	default= False
)

# affect_alpha: bool (Turn this on to make shadows affect the alpha contribution of the matte surface.)
BoolProperty(
	attr= 'vb_mwrap_affect_alpha',
	name= 'Affect alpha',
	description= "Turn this on to make shadows affect the alpha contribution of the matte surface.",
	default= False
)

# shadow_tint_color: color (Tint for the shadows on the matte surface.) = Color(0, 0, 0)
VectorProperty( 
	attr= "vb_mwrap_shadow_tint_color", 
	name= "Shadow tint color", 
	description= 'Tint for the shadows on the matte surface.', 
	subtype= "COLOR", 
	min= 0.0, 
	max= 1.0, 
	soft_min= 0.0, 
	soft_max= 1.0, 
	default= (0.0, 0.0, 0.0)
)

# shadow_brightness: float (An optional brightness parameter for the shadows on the matte surface.A value of 0.0 will make the shadows completely invisible, while a value of 1.0 will show the full shadows.)
FloatProperty(
	attr= 'vb_mwrap_shadow_brightness',
	name= 'Shadow brightness',
	description= "An optional brightness parameter for the shadows on the matte surface.A value of 0.0 will make the shadows completely invisible, while a value of 1.0 will show the full shadows.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# reflection_amount: float (Shows the reflections of the base material.)
FloatProperty(
	attr= 'vb_mwrap_reflection_amount',
	name= 'Reflection amount',
	description= "Shows the reflections of the base material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# refraction_amount: float (Shows the refractions of the base material.)
FloatProperty(
	attr= 'vb_mwrap_refraction_amount',
	name= 'Refraction amount',
	description= "Shows the refractions of the base material.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# gi_amount: float (Determines the amount of gi shadows.)
FloatProperty(
	attr= 'vb_mwrap_gi_amount',
	name= 'GI amount',
	description= "Determines the amount of gi shadows.",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# no_gi_on_other_mattes: bool (This will cause the material to appear as a matte object in reflections, refractions, GI etc for other matte objects.)
BoolProperty(
	attr= 'vb_mwrap_no_gi_on_other_mattes',
	name= 'No gi on other mattes',
	description= "This will cause the material to appear as a matte object in reflections, refractions, GI etc for other matte objects.",
	default= True
)

# matte_for_secondary_rays: bool (Turn this on to make the material act as matte for all secondary rays (reflections, refractions, etc))
BoolProperty(
	attr= 'vb_mwrap_matte_for_sec_rays',
	name= 'Matte for secondary rays',
	description= "Turn this on to make the material act as matte for all secondary rays (reflections, refractions, etc)",
	default= False
)

# gi_surface_id: integer (If two objects have different GI surface ids, the light cache samples of the two objects will not be blended)
IntProperty(
	attr= 'vb_mwrap_gi_surface_id',
	name= 'GI surface id',
	description= "If two objects have different GI surface ids, the light cache samples of the two objects will not be blended",
	min= 0,
	max= 10,
	default= 0
)

# gi_quality_multiplier: float (A multiplier for GI quality)
FloatProperty(
	attr= 'vb_mwrap_gi_quality_multiplier',
	name= 'GI quality multiplier',
	description= "A multiplier for GI quality",
	min= 0.0,
	max= 1.0,
	soft_min= 0.0,
	soft_max= 1.0,
	precision= 3,
	default= 1
)

# alpha_contribution_tex: float texture (Same as alpha_contribution but used for the Maya's useBackground shader which supports textures as alpha contribution) = 1
# shadow_brightness_tex: float texture (Same as shadow_brightness but used for the Maya's useBackground shader which supports textures as shadow brightness) = 1
# reflection_filter_tex: acolor texture = AColor(1, 1, 1, 1)

# trace_depth: integer (The maximum reflection depth (-1 is controlled by the global options))
IntProperty(
	attr= 'vb_mwrap_trace_depth',
	name= 'Trace depth',
	description= "The maximum reflection depth (-1 is controlled by the global options)",
	min= -1,
	max= 1000,
	default= -1
)

# channels: plugin (Render channels the result of this BRDF will be written to), unlimited list



'''
  Plugin: GeomMeshFile
'''
BoolProperty(
	attr="vray_proxy",
	name="Proxy",
	description="",
	default= False
)

StringProperty(
	attr="vray_proxy_file",
	name="File",
	subtype= 'FILE_PATH',
	description="Proxy file."
)

EnumProperty(
	attr="vray_proxy_anim_type",
	name="Animation type",
	description="Proxy animation type.",
	items=(("LOOP",     "Loop",      "TODO."),
		   ("ONCE",     "Once",      "TODO."),
		   ("PINGPONG", "Ping-pong", "TODO."),
		   ("STILL",    "Still",     "TODO.")),
	default= "LOOP"
)

FloatProperty(
	attr="vray_proxy_anim_speed",
	name="Speed",
	description="Animated proxy playback speed.",
	min=0.0, max=1000.0,
	soft_min=0.0, soft_max=1.0,
	default= 1.0
)

FloatProperty(
	attr="vray_proxy_anim_offset",
	name="Offset",
	description="Animated proxy initial frame offset.",
	min=0.0, max=1000.0, soft_min=0.0, soft_max=1.0, default= 0.0
)



'''
  GUI
'''
narrowui= 200

def base_poll(cls, context):
	rd= context.scene.render
	return (context.object and (context.object.type not in ('LAMP','CAMERA','ARMATURE'))) and (rd.engine in cls.COMPAT_ENGINES)


class ObjectButtonsPanel():
	bl_space_type  = 'PROPERTIES'
	bl_region_type = 'WINDOW'
	bl_context     = 'object'


class OBJECT_PT_vray_wrapper(ObjectButtonsPanel, bpy.types.Panel):
	bl_label = "Wrapper"
	bl_default_closed = True

	COMPAT_ENGINES = {'VRAY_RENDER'}

	@staticmethod
	def poll(context):
		return base_poll(__class__, context)

	def draw_header(self, context):
		ob= context.object
		self.layout.prop(ob, "vray_node_use_wrapper", text="")

	def draw(self, context):
		ob= context.object
		me= context.mesh

		layout= self.layout
		layout.active= ob.vray_node_use_wrapper

		wide_ui= context.region.width > narrowui

		split= layout.split()
		col= split.column()
		col.prop(ob, 'vb_mwrap_generate_gi')
		col.prop(ob, 'vb_mwrap_receive_gi')
		if(wide_ui):
			col= split.column()
		col.prop(ob, 'vb_mwrap_generate_caustics')
		col.prop(ob, 'vb_mwrap_receive_caustics')

		split= layout.split()
		col= split.column()
		col.prop(ob, 'vb_mwrap_gi_quality_multiplier')

		split= layout.split()
		col= split.column()
		col.label(text="Matte properties")

		split= layout.split()
		colL= split.column()
		colL.prop(ob, 'vb_mwrap_matte_surface')
		if(wide_ui):
			colR= split.column()
		else:
			colR= colL
		colR.prop(ob, 'vb_mwrap_alpha_contribution')
		if(ob.vb_mwrap_matte_surface):
			colR.prop(ob, 'vb_mwrap_reflection_amount')
			colR.prop(ob, 'vb_mwrap_refraction_amount')
			colR.prop(ob, 'vb_mwrap_gi_amount')
			colR.prop(ob, 'vb_mwrap_no_gi_on_other_mattes')

			colL.prop(ob, 'vb_mwrap_affect_alpha')
			colL.prop(ob, 'vb_mwrap_shadows')
			if(ob.vb_mwrap_shadows):
				colL.prop(ob, 'vb_mwrap_shadow_tint_color')
				colL.prop(ob, 'vb_mwrap_shadow_brightness')
			
		#col.prop(ob, 'vb_mwrap_alpha_contribution_tex')
		#col.prop(ob, 'vb_mwrap_shadow_brightness_tex')
		#col.prop(ob, 'vb_mwrap_reflection_filter_tex')

		split= layout.split()
		col= split.column()
		col.label(text="Miscellaneous")

		split= layout.split()
		col= split.column()
		col.prop(ob, 'vb_mwrap_gi_surface_id')
		col.prop(ob, 'vb_mwrap_trace_depth')
		if(wide_ui):
			col= split.column()
		col.prop(ob, 'vb_mwrap_matte_for_sec_rays')


class OBJECT_PT_vray_render(ObjectButtonsPanel, bpy.types.Panel):
	bl_label = "Render"
	bl_default_closed = True
	
	COMPAT_ENGINES = {'VRAY_RENDER'}

	@staticmethod
	def poll(context):
		return base_poll(__class__, context)

	def draw(self, context):
		ob= context.object
		me= context.mesh

		layout= self.layout

		wide_ui= context.region.width > narrowui

		split= layout.split()
		col= split.column()
		col.prop(ob, 'vb_mrs_visibility', text="Visible")

		split= layout.split()
		col= split.column()
		col.label(text="Visible to:")

		split= layout.split()
		sub= split.column()
		sub.active= ob.vb_mrs_visibility
		sub.prop(ob, 'vb_mrs_camera_visibility', text="Camera")
		sub.prop(ob, 'vb_mrs_gi_visibility', text="GI")
		sub.prop(ob, 'vb_mrs_shadows_visibility', text="Shadows")
		if(wide_ui):
			sub= split.column()
			sub.active= ob.vb_mrs_visibility
		sub.prop(ob, 'vb_mrs_reflections_visibility', text="Reflections")
		sub.prop(ob, 'vb_mrs_refractions_visibility', text="Refractions")


# bpy.types.register(OBJECT_PT_vray_wrapper)
# bpy.types.register(OBJECT_PT_vray_render)
